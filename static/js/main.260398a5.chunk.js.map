{"version":3,"sources":["prop-types.js","components/additions/additions.js","components/footer/footer.js","components/instructions/instructions.js","components/maximum-spend/maximum-spend.js","components/remaining-balance/remaining-balance.js","services/fare-calculations.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["fare","PropTypes","shape","cost","number","isRequired","rides","defaultFares","arrayOf","getClassNamesForFareItem","fareIndex","amountOfFares","classNames","Additions","_ref","_ref$fares","fares","length","react_default","a","createElement","className","map","idx","key","toFixed","Footer","href","Instructions","MaximumSpend","onChange","value","htmlFor","react_currency_masked_input_default","id","type","RemainingBalance","autoFocus","isValidAmountToAdd","maximumValue","costForFaresInBudget","currentBalance","arguments","undefined","maximumSpend","ridesLeftOnCard","Math","floor","amountOfRidesPossibleWithinBudget","rideCount","push","getFaresForSpendingRange","initialState","interacted","maximum","reducer","state","action","Object","objectSpread","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","_React$useReducer","React","useReducer","_React$useReducer2","slicedToArray","dispatch","remaining_balance","event","maximum_spend","additions","footer","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.260398a5.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nexport const fare = PropTypes.shape({\n  cost: PropTypes.number.isRequired,\n  rides: PropTypes.number.isRequired\n})\n\nexport const fares = PropTypes.arrayOf(fare)\n","import React from 'react'\nimport * as AppPropTypes from '../../prop-types'\n\nconst defaultFares = []\n\nconst getClassNamesForFareItem = (fareIndex, amountOfFares) => {\n  let classNames = 'lh-copy pv2 ba bl-0 bt-0 br-0 b--dotted b--black-30'\n  const isThisTheLastFare = fareIndex === (amountOfFares - 1)\n  if (isThisTheLastFare)\n    classNames += ' bb-0'\n  return classNames\n}\n\nconst getDisplayCost = actualCost => actualCost.toFixed(2)\n\nconst Additions = ({ fares = defaultFares  }) => (fares.length) ?\n  <ul className=\"list pl0 measure center mt2 mb0\">\n  {fares.map((fare, idx) =>\n    <li className={getClassNamesForFareItem(idx, fares.length)} key={idx}>\n      Add {getDisplayCost(fare.cost)} for {fare.rides} rides\n    </li>\n  )}\n  </ul>\n  : null\n\nAdditions.propTypes = {\n  fares: AppPropTypes.fares\n}\n\nexport default Additions\n","import React from 'react'\n\nconst Footer = () =>\n  <footer className=\"f6 bt b--black-20\">\n    <p>Say hello <a href=\"twitter.com/farelyapp\">@farelyapp</a></p>\n  </footer>\n\nexport default Footer\n\n","import React from 'react'\n\nexport default function Instructions() {\n  return (\n    <p className=\"f5 lh-copy measure-narrow\">\n      Enter your MetroCardâ€™s current balance to calculate the amount to put on\n      it for an exact number of rides.\n    </p>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CurrencyMaskedInput from 'react-currency-masked-input'\n\nconst MaximumSpend = ({ onChange, value }) =>\n  <p className=\"mb0\">\n    <label className=\"db fw6 lh-copy f5\" htmlFor=\"maximum-spend\">Max to spend</label>\n    <CurrencyMaskedInput className=\"pa2 w-100 input-reset ba measure b--black-20\" id=\"maximum-spend\" type=\"number\" value={value} onChange={onChange}/>\n  </p>\n\nMaximumSpend.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default MaximumSpend\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CurrencyMaskedInput from 'react-currency-masked-input'\n\nconst RemainingBalance = ({ onChange, value }) =>\n  <p>\n    <label className=\"db fw6 lh-copy f5\" htmlFor=\"remaining-balance\">\n      Current balance\n    </label>\n    <CurrencyMaskedInput\n      className=\"pa2 w-100 input-reset ba measure b--black-20\"\n      id=\"remaining-balance\"\n      autoFocus\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n    />\n  </p>\n\nRemainingBalance.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default RemainingBalance\n","import { TRANSACTION_MAX, RIDE_COST } from '../constants'\n\nconst getFaresForSpendingRange = (currentBalance, maximumSpend) => {\n  const ridesLeftOnCard =\n    currentBalance > RIDE_COST ? Math.floor(currentBalance / RIDE_COST) : 0\n  const amountOfRidesPossibleWithinBudget = Math.floor(maximumSpend / RIDE_COST)\n  const fares = []\n\n  for (\n    let rideCount = ridesLeftOnCard + 1;\n    rideCount <= amountOfRidesPossibleWithinBudget;\n    rideCount++\n  ) {\n    const fare = rideCount * RIDE_COST\n    const cost = fare - currentBalance\n    if (isValidAmountToAdd(cost, maximumSpend)) {\n      fares.push({ rides: rideCount, cost })\n    }\n  }\n\n  return fares\n}\n\nconst isDollarAmountAMultipleOfFive = dollarAmount =>\n  (dollarAmount * 100) % 5 === 0\n\nconst isValidAmountToAdd = (value, maximumValue) =>\n  isDollarAmountAMultipleOfFive(value) && value <= maximumValue\n\nexport const costForFaresInBudget = (\n  currentBalance = 0,\n  maximumSpend = TRANSACTION_MAX,\n) => {\n  const maximumAmountToSpend =\n    maximumSpend > TRANSACTION_MAX ? TRANSACTION_MAX : maximumSpend\n  return getFaresForSpendingRange(currentBalance, maximumAmountToSpend)\n}\n","export const RIDE_COST = 2.75 // $\nexport const TRANSACTION_MAX = 80 // $\n","import React from 'react'\nimport {\n  RemainingBalance,\n  MaximumSpend,\n  Additions,\n  Instructions,\n  Footer,\n} from './components'\nimport { costForFaresInBudget } from './services/fare-calculations'\nimport './styles'\n\nconst defaultCurrentBalance = '0.00'\nconst defaultMaximumSpend = '40.00'\nconst initialState = {\n  interacted: false,\n  fares: costForFaresInBudget(defaultCurrentBalance, defaultMaximumSpend),\n  currentBalance: defaultCurrentBalance,\n  maximum: defaultMaximumSpend,\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'balance':\n      return {\n        ...state,\n        currentBalance: action.value,\n        fares: costForFaresInBudget(action.value, state.maximum),\n        interacted: true,\n      }\n    case 'maximum':\n      return {\n        ...state,\n        maximum: action.value,\n        fares: costForFaresInBudget(state.currentBalance, action.value),\n        interacted: true,\n      }\n    default:\n      return state\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const { fares, currentBalance, maximum, interacted } = state\n\n  function handleBalanceChange(event, value) {\n    dispatch({ type: 'balance', value })\n  }\n  function handleMaximumChange(event, value) {\n    dispatch({ type: 'maximum', value })\n  }\n\n  return (\n    <main className=\"sans-serif mw5 center\">\n      <RemainingBalance value={currentBalance} onChange={handleBalanceChange} />\n      <MaximumSpend value={maximum} onChange={handleMaximumChange} />\n      {interacted ? (\n        <Additions fares={fares} />\n      ) : (\n        <Instructions />\n      )}\n      <Footer />\n    </main>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nrender(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}