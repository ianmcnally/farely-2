{"version":3,"sources":["prop-types.js","components/additions/additions.js","components/footer/footer.js","components/instructions/instructions.js","components/maximum-spend/maximum-spend.js","components/remaining-balance/remaining-balance.js","services/fare-calculations.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["fare","PropTypes","shape","cost","number","isRequired","rides","defaultFares","arrayOf","getClassNamesForFareItem","fareIndex","amountOfFares","classNames","Additions","_ref","_ref$fares","fares","length","react_default","a","createElement","className","map","idx","key","toFixed","Footer","href","getClassNamesForInstructions","shouldHideInstructions","Instructions","hide","defaultProps","MaximumSpend","onChange","value","htmlFor","react_currency_masked_input_default","id","type","RemainingBalance","autoFocus","costForFaresInBudget","currentBalance","arguments","undefined","maximumSpend","maximumAmountToSpend","getCostsForFares","ridesLeftOnCard","Math","floor","amountOfRidesPossibleWithinBudget","range","rideCount","getPossibleFaresForSpendingRange","filter","_ref2","maximumValue","initialState","maximum","reducer","state","action","Object","objectSpread","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","_React$useReducer","React","useReducer","_React$useReducer2","slicedToArray","dispatch","hideInstructions","remaining_balance","event","maximum_spend","additions","instructions","footer","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6cec3d7f.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nexport const fare = PropTypes.shape({\n  cost: PropTypes.number.isRequired,\n  rides: PropTypes.number.isRequired\n})\n\nexport const fares = PropTypes.arrayOf(fare)\n","import React from 'react'\nimport * as AppPropTypes from '../../prop-types'\n\nconst defaultFares = []\n\nconst getClassNamesForFareItem = (fareIndex, amountOfFares) => {\n  let classNames = 'lh-copy pv2 ba bl-0 bt-0 br-0 b--dotted b--black-30'\n  const isThisTheLastFare = fareIndex === (amountOfFares - 1)\n  if (isThisTheLastFare)\n    classNames += ' bb-0'\n  return classNames\n}\n\nconst getDisplayCost = actualCost => actualCost.toFixed(2)\n\nconst Additions = ({ fares = defaultFares  }) => (fares.length) ?\n  <ul className=\"list pl0 measure center mt2 mb0\">\n  {fares.map((fare, idx) =>\n    <li className={getClassNamesForFareItem(idx, fares.length)} key={idx}>\n      Add {getDisplayCost(fare.cost)} for {fare.rides} rides\n    </li>\n  )}\n  </ul>\n  : null\n\nAdditions.propTypes = {\n  fares: AppPropTypes.fares\n}\n\nexport default Additions\n","import React from 'react'\n\nconst Footer = () =>\n  <footer className=\"f6 bt b--black-20\">\n    <p>Say hello <a href=\"twitter.com/farelyapp\">@farelyapp</a></p>\n  </footer>\n\nexport default Footer\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst getClassNamesForInstructions = shouldHideInstructions => {\n  let classNames = 'f5 lh-copy measure-narrow'\n  if (shouldHideInstructions)\n    classNames += ' dn'\n  return classNames\n}\n\nconst Instructions = ({ hide }) =>\n  <p className={getClassNamesForInstructions(hide)}>\n    Enter your MetroCardâ€™s current balance to calculate the amount to put on it for an exact number of rides.\n  </p>\n\nInstructions.propTypes = {\n  hide: PropTypes.bool.isRequired\n}\n\nInstructions.defaultProps = {\n  hide: false\n}\n\nexport default Instructions\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CurrencyMaskedInput from 'react-currency-masked-input'\n\nconst MaximumSpend = ({ onChange, value }) =>\n  <p className=\"mb0\">\n    <label className=\"db fw6 lh-copy f5\" htmlFor=\"maximum-spend\">Max to spend</label>\n    <CurrencyMaskedInput className=\"pa2 w-100 input-reset ba measure b--black-20\" id=\"maximum-spend\" type=\"number\" value={value} onChange={onChange}/>\n  </p>\n\nMaximumSpend.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default MaximumSpend\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CurrencyMaskedInput from 'react-currency-masked-input'\n\nconst RemainingBalance = ({ onChange, value }) =>\n  <p>\n    <label className=\"db fw6 lh-copy f5\" htmlFor=\"remaining-balance\">\n      Current balance\n    </label>\n    <CurrencyMaskedInput\n      className=\"pa2 w-100 input-reset ba measure b--black-20\"\n      id=\"remaining-balance\"\n      autoFocus\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n    />\n  </p>\n\nRemainingBalance.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default RemainingBalance\n","import {\n  TRANSACTION_MAX,\n  RIDE_COST\n} from '../constants'\nimport range from 'lodash.range'\n\nconst getPossibleFaresForSpendingRange = (currentBalance, maximumSpend) => {\n  const ridesLeftOnCard = (currentBalance > RIDE_COST) ? Math.floor(currentBalance / RIDE_COST) : 0\n  const amountOfRidesPossibleWithinBudget = Math.floor(maximumSpend / RIDE_COST)\n\n  return range(ridesLeftOnCard + 1, amountOfRidesPossibleWithinBudget + 1).map(rideCount => ({\n    rides: rideCount,\n    fare: rideCount * RIDE_COST\n  }))\n}\n\nconst getCostsForFares = (currentBalance, fares) => fares.map(({ rides, fare }) => {\n  const costOfFare = fare - currentBalance\n  return { rides, cost: costOfFare }\n})\n\nconst isDollarAmountAMultipleOfFive = dollarAmount => ((dollarAmount * 100) % 5) === 0\n\nconst isValidAmountToAdd = (value, maximumValue) => isDollarAmountAMultipleOfFive(value) && (value <= maximumValue)\n\nexport const costForFaresInBudget = (currentBalance = 0, maximumSpend = TRANSACTION_MAX) => {\n  const maximumAmountToSpend = (maximumSpend > TRANSACTION_MAX) ? TRANSACTION_MAX : maximumSpend\n  const possibleFares = getPossibleFaresForSpendingRange(currentBalance, maximumAmountToSpend)\n  const possibleCosts = getCostsForFares(currentBalance, possibleFares)\n  const validAmountsToAdd = possibleCosts.filter(({ cost }) => isValidAmountToAdd(cost, maximumAmountToSpend))\n  return validAmountsToAdd\n}\n","export const RIDE_COST = 2.75 // $\nexport const TRANSACTION_MAX = 80 // $\n","import React from 'react'\nimport {\n  RemainingBalance,\n  MaximumSpend,\n  Additions,\n  Instructions,\n  Footer,\n} from './components'\nimport { costForFaresInBudget } from './services/fare-calculations'\nimport './styles'\n\nconst defaultCurrentBalance = '0.00'\nconst defaultMaximumSpend = '40.00'\nconst initialState = {\n  fares: costForFaresInBudget(defaultCurrentBalance, defaultMaximumSpend),\n  currentBalance: defaultCurrentBalance,\n  maximum: defaultMaximumSpend,\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'balance':\n      return {\n        ...state,\n        currentBalance: action.value,\n        fares: costForFaresInBudget(action.value, state.maximum),\n      }\n    case 'maximum':\n      return {\n        ...state,\n        maximum: action.value,\n        fares: costForFaresInBudget(state.currentBalance, action.value),\n      }\n    default:\n      return state\n  }\n}\n\nexport default function App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const { fares, currentBalance, maximum } = state\n  const hideInstructions = Boolean(fares)\n\n  function handleBalanceChange(event, value) {\n    dispatch({ type: 'balance', value })\n  }\n  function handleMaximumChange(event, value) {\n    dispatch({ type: 'maximum', value })\n  }\n\n  return (\n    <main className=\"sans-serif mw5 center\">\n      <RemainingBalance value={currentBalance} onChange={handleBalanceChange} />\n      <MaximumSpend value={maximum} onChange={handleMaximumChange} />\n      <Additions fares={fares} />\n      <Instructions hide={hideInstructions} />\n      <Footer />\n    </main>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nrender(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}